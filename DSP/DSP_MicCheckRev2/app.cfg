var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
var Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;
var task0Params = new Task.Params();
task0Params.instance.name = "AudioTsk";
task0Params.priority = 10;
Program.global.AudioTsk = Task.create("&MainAudioProcessingTask", task0Params);
var task0Params0 = new Task.Params();
task0Params0.instance.name = "LCDTsk";
task0Params0.priority = 1;
Program.global.LCDTsk = Task.create("&LCDTask", task0Params0);
var queue0Params = new Queue.Params();
queue0Params.instance.name = "AudioRxBufferQueue";
Program.global.AudioRxBufferQueue = Queue.create(queue0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "AudioRxQueueSem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.AudioRxQueueSem = Semaphore.create(null, semaphore0Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "EDMA_Hwi";
hwi0Params.eventId = 8;
Program.global.EDMA_Hwi = Hwi.create(5, "&AudioDataReady", hwi0Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "MCASP_Error_Hwi";
hwi1Params.eventId = 61;
Program.global.MCASP_Error_Hwi = Hwi.create(6, "&AudioTransferErrors", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "LCD_Error_Hwi";
hwi2Params.eventId = 73;
Program.global.LCD_Error_Hwi = Hwi.create(8, "&LCD_FrameSyncLostFix", hwi2Params);
BIOS.cpuFreq.lo = 300000000;
Program.sectMap[".cinit"] = new Program.SectionSpec();
Program.sectMap[".cinit"].loadSegment = "SDRAM";
Program.sectMap[".lcdFrames"] = new Program.SectionSpec();
Program.sectMap[".lcdFrames"].loadAlign = 8;
Program.sectMap[".lcdFrames"].loadSegment = "SDRAM";

var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "MicButtonHwi";
hwi3Params.eventId = 38;
Program.global.MicButtonHwi = Hwi.create(7, "&MicInterfaceButtonPressReceived", hwi3Params);

var queue1Params = new Queue.Params();
queue1Params.instance.name = "MicButtonQueue";
Program.global.MicButtonQueue = Queue.create(queue1Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "MicButtonQueueSem";
semaphore1Params.mode = Semaphore.Mode_COUNTING;
Program.global.MicButtonQueueSem = Semaphore.create(null, semaphore1Params);
var task3Params = new Task.Params();
task3Params.instance.name = "BtnTsk";
task3Params.stackSize = 512;
task3Params.priority = 2;
Program.global.BtnTsk = Task.create("&MicButtonResponseTask", task3Params);
var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "TouchScreen_Hwi";
hwi4Params.arg = 0;
hwi4Params.eventId = 49;
Program.global.TouchScreen_Hwi = Hwi.create(9, "&LCD_TouchScreenEvent", hwi4Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "TouchEventSem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.TouchEventSem = Semaphore.create(null, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "I2CTransferCompleteSem";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.I2CTransferCompleteSem = Semaphore.create(null, semaphore3Params);
var task4Params = new Task.Params();
task4Params.instance.name = "TouchTsk";
task4Params.stackSize = 1024;
task4Params.priority = 3;
Program.global.TouchTsk = Task.create("&LCDTouchTask", task4Params);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "I2C_Hwi";
hwi5Params.eventId = 36;
Program.global.I2C_Hwi = Hwi.create(10, "&I2CByteEvent", hwi5Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "PhaseTimer";
timer0Params.period = 10000000;
Program.global.PhaseTimer = Timer.create(null, "&PhaseReset", timer0Params);
Idle.idleFxns[0] = "&DeviationDisplay";
